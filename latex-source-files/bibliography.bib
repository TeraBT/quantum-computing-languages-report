@article{gay_quantum_2006,
	title = {Quantum programming languages: survey and bibliography},
	volume = {16},
	issn = {1469-8072, 0960-1295},
	shorttitle = {Quantum programming languages},
	url = {https://www.cambridge.org/core/journals/mathematical-structures-in-computer-science/article/quantum-programming-languages-survey-and-bibliography/80E4ECC8AE770B625A48F2EE28358BA6},
	doi = {10.1017/S0960129506005378},
	abstract = {The field of quantum programming languages is developing rapidly and there is a surprisingly large literature. Research in this area includes the design of programming languages for quantum computing, the application of established semantic and logical techniques to the foundations of quantum mechanics, and the design of compilers for quantum programming languages. This article justifies the study of quantum programming languages, presents the basics of quantum computing, surveys the literature in quantum programming languages, and indicates directions for future research.},
	language = {en},
	number = {4},
	urldate = {2024-03-24},
	journal = {Mathematical Structures in Computer Science},
	author = {Gay, Simon J.},
	month = aug,
	year = {2006},
	pages = {581--600},
}

@incollection{selinger_brief_2004,
	address = {Berlin, Heidelberg},
	title = {A {Brief} {Survey} of {Quantum} {Programming} {Languages}},
	volume = {2998},
	isbn = {978-3-540-21402-1 978-3-540-24754-8},
	url = {http://link.springer.com/10.1007/978-3-540-24754-8_1},
	abstract = {This article is a brief and subjective survey of quantum programming language research.},
	language = {en},
	urldate = {2024-03-24},
	booktitle = {Functional and {Logic} {Programming}},
	publisher = {Springer Berlin Heidelberg},
	author = {Selinger, Peter},
	editor = {Goos, Gerhard and Hartmanis, Juris and Van Leeuwen, Jan and Kameyama, Yukiyoshi and Stuckey, Peter J.},
	year = {2004},
	doi = {10.1007/978-3-540-24754-8_1},
	note = {Series Title: Lecture Notes in Computer Science},
	pages = {1--6},
}

@inproceedings{altenkirch_functional_2005,
	title = {A functional quantum programming language},
	url = {https://ieeexplore.ieee.org/abstract/document/1509229},
	doi = {10.1109/LICS.2005.1},
	abstract = {We introduce the language QML, a functional language for quantum computations on finite types. Its design is guided by its categorical semantics: QML programs are interpreted by morphisms in the category FQC of finite quantum computations, which provides a constructive semantics of irreversible quantum computations realisable as quantum gates. QML integrates reversible and irreversible quantum computations in one language, using first order strict linear logic to make weakenings explicit. Strict programs are free from decoherence and hence preserve superpositions and entanglement -which is essential for quantum parallelism.},
	urldate = {2024-03-24},
	booktitle = {20th {Annual} {IEEE} {Symposium} on {Logic} in {Computer} {Science} ({LICS}' 05)},
	author = {Altenkirch, T. and Grattage, J.},
	month = jun,
	year = {2005},
	note = {ISSN: 1043-6871},
	keywords = {Program processors, Circuits, Computer languages, Computer science, Functional programming, Logic programming, Parallel processing, Parallel programming, Quantum computing, Quantum entanglement},
	pages = {249--258},
}

@inproceedings{green_quipper_2013,
	address = {New York, NY, USA},
	series = {{PLDI} '13},
	title = {Quipper: a scalable quantum programming language},
	isbn = {978-1-4503-2014-6},
	shorttitle = {Quipper},
	url = {https://dl.acm.org/doi/10.1145/2491956.2462177},
	doi = {10.1145/2491956.2462177},
	abstract = {The field of quantum algorithms is vibrant. Still, there is currently a lack of programming languages for describing quantum computation on a practical scale, i.e., not just at the level of toy problems. We address this issue by introducing Quipper, a scalable, expressive, functional, higher-order quantum programming language. Quipper has been used to program a diverse set of non-trivial quantum algorithms, and can generate quantum gate representations using trillions of gates. It is geared towards a model of computation that uses a classical computer to control a quantum device, but is not dependent on any particular model of quantum hardware. Quipper has proven effective and easy to use, and opens the door towards using formal methods to analyze quantum algorithms.},
	urldate = {2024-03-24},
	booktitle = {Proceedings of the 34th {ACM} {SIGPLAN} {Conference} on {Programming} {Language} {Design} and {Implementation}},
	publisher = {Association for Computing Machinery},
	author = {Green, Alexander S. and Lumsdaine, Peter LeFanu and Ross, Neil J. and Selinger, Peter and Valiron, Benoît},
	month = jun,
	year = {2013},
	keywords = {quantum programming languages, quipper},
	pages = {333--342},
}

@article{abhari_scaffold,
	title = {Scaffold: {Quantum} {Programming} {Language}},
	language = {en},
	author = {Abhari, Ali Javadi and Faruque, Arvin and Dousti, Mohammad Javad and Svec, Lukas and Catu, Oana and Chakrabati, Amlan and Chiang, Chen-Fu and Vanderwilt, Seth and Black, John and Chong, Fred and Martonosi, Margaret and Suchara, Martin and Brown, Ken and Pedram, Massoud and Brun, Todd},
}


@masterthesis{oemer_procedural_1998,
	title = {A {Procedural} {Formalism} of {Quantum} {Computing}},
	url = {http://tph.tuwien.ac.at/~oemer/doc/qcldoc.pdf},
	urldate = {2024-03-24},
	author = {Ömer, Bernhard},
	year = {1998},
}

@phdthesis{oemer_structured_2003,
	title = {Structured {Quantum} {Programming}},
	url = {http://tph.tuwien.ac.at/~oemer/doc/structquprog.pdf},
	urldate = {2024-03-24},
	author = {Ömer, Bernhard},
	year = {2003},
}

@masterthesis{oemer_quantum_2000,
	title = {Quantum {Programming} in {QCL}},
	url = {http://tph.tuwien.ac.at/~oemer/doc/quprog.pdf},
	urldate = {2024-03-24},
	author = {Ömer, Bernhard},
	year = {2000},
}



@misc{washington_uni_q_sharp_intro,
	title = {qsharp-intro.pdf},
	url = {https://courses.cs.washington.edu/courses/cse490q/20au/hws/qsharp-intro.pdf},
	urldate = {2024-03-23},
	file = {qsharp-intro.pdf:C\:\\Users\\chris\\Zotero\\storage\\NBGFNIDU\\qsharp-intro.pdf:application/pdf},
}


@misc{wikipedia_quantum_2024,
	title = {Quantum programming},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Quantum_programming&oldid=1212848232},
	abstract = {Quantum programming is the process of designing or assembling sequences of instructions, called quantum circuits, using gates, switches, and operators to manipulate a quantum system for a desired outcome or results of a given experiment. Quantum circuit algorithms can be implemented on integrated circuits, conducted with instrumentation, or written in a programming language for use with a quantum computer or a quantum processor.
With quantum processor based systems, quantum programming languages help express quantum algorithms using high-level constructs. The field is deeply rooted in the open-source philosophy and as a result most of the quantum software discussed in this article is freely available as open-source software.Quantum computers, such as those based on the KLM protocol, a linear optical quantum computing (LOQC) model, use quantum algorithms (circuits) implemented with electronics, integrated circuits, instrumentation, sensors, and/or by other physical means.Other circuits designed for experimentation related to quantum systems can be instrumentation and sensor based.},
	language = {en},
	urldate = {2024-03-24},
	journal = {Wikipedia},
	month = mar,
	year = {2024},
	note = {Page Version ID: 1212848232},
}

@misc{wikipedia_q_sharp,
	title = {Q {Sharp}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Q_Sharp&oldid=1205912570#References},
	abstract = {Q\# (pronounced as Q sharp) is a domain-specific programming language used for expressing quantum algorithms. It was initially released to the public by Microsoft as part of the Quantum Development Kit.},
	language = {en},
	urldate = {2024-03-24},
	note = {Page Version ID: 1205912570},
}

@misc{khammassi_cqasm_2018,
	title = {{cQASM} v1.0: {Towards} a {Common} {Quantum} {Assembly} {Language}},
	shorttitle = {{cQASM} v1.0},
	url = {http://arxiv.org/abs/1805.09607},
	doi = {10.48550/arXiv.1805.09607},
	abstract = {The quantum assembly language (QASM) is a popular intermediate representation used in many quantum compilation and simulation tools to describe quantum circuits. Currently, multiple different dialects of QASM are used in different quantum computing tools. This makes the interaction between those tools tedious and time-consuming due to the need for translators between theses different syntaxes. Beside requiring a multitude of translators, the translation process exposes the constant risk of loosing information due to the potential incompatibilities between the different dialects. Moreover, several tools introduce details of specific target hardware or qubit technologies within the QASM syntax and prevent porting the code to other hardwares. In this paper, we propose a common QASM syntax definition, named cQASM, which aims to abstract away qubit technology details and guarantee the interoperability between all the quantum compilation and simulation tools supporting this standard. Our vision is to enable an extensive quantum computing toolbox shared by all the quantum computing community.},
	urldate = {2024-03-24},
	publisher = {arXiv},
	author = {Khammassi, N. and Guerreschi, G. G. and Ashraf, I. and Hogaboam, J. W. and Almudever, C. G. and Bertels, K.},
	month = may,
	year = {2018},
	note = {arXiv:1805.09607 [quant-ph]
version: 1},
	keywords = {Quantum Physics},
	annote = {Comment: 8 pages, 1 Figure, 7 Listings},
}

@article{paltenghi_2022,
   title={Bugs in Quantum computing platforms: an empirical study},
   volume={6},
   ISSN={2475-1421},
   url={http://dx.doi.org/10.1145/3527330},
   DOI={10.1145/3527330},
   number={OOPSLA1},
   journal={Proceedings of the ACM on Programming Languages},
   publisher={Association for Computing Machinery (ACM)},
   author={Paltenghi, Matteo and Pradel, Michael},
   year={2022},
   month=apr, pages={1-27} }

@misc{cross2017open,
      title={Open Quantum Assembly Language}, 
      author={Andrew W. Cross and Lev S. Bishop and John A. Smolin and Jay M. Gambetta},
      year={2017},
      eprint={1707.03429},
      archivePrefix={arXiv},
      primaryClass={quant-ph}
}

@article{balamurugan_2024,
title = {Quantum computing basics, applications and future perspectives},
journal = {Journal of Molecular Structure},
volume = {1308},
pages = {137917},
year = {2024},
issn = {0022-2860},
doi = {https://doi.org/10.1016/j.molstruc.2024.137917},
url = {https://www.sciencedirect.com/science/article/pii/S002228602400440X},
author = {Balamurugan {K S} and Sivakami A and Mathankumar M and Yalla Jnan Devi {Satya prasad} and Irfan Ahmad},
keywords = {Qubits, Quantum computing, Quantum cryptography, Superposition},
abstract = {Quantum Computing observed a significant rise to public and technologies in past three decades, the reason behind for the development of quantum computing is to solve various problems which are so complex that traditional (classical) computers were not able to solve. New technologies, hardware components and software advancements are being discovered all around the world in order to use this powerful tool. But in addition to the development of technologies and the attempt to scale up the quantum computers, new challenges and problems too came in light which makes it tough for further progress in the quest to unlock the true development of quantum computers. Various methods has been identified for Quantum Information Processing (QIP), but the error rates were more than what we would expect often resulting in inappropriate computations which eventually gives inaccurate conclusions.In this work, we discuss about the prominent hardware and software methods to build the quantum computers with low error rates and better accuracy, we will look onto the topics related to qubits and its principles which are incorporated in Quantum Processing Units (QPUs) which govern the working of quantum computers, the topics of quantum algorithms and its methodology are also been discussed to provide a clear understanding of the manipulation of qubits according to the purpose needed. In addition to that we will talk about the applications like quantum teleportation and cryptography which utilizes the quantum computers, and discuss about the future enhancements which can be done using this technology.}
}

@misc{kueng2023quantum,
  author       = {Richard Kueng},
  title        = {Introduction to Quantum Computing},
  year         = {2023},
  institution  = {Johannes Kepler University Linz},
  note         = {Lecture script, Fall 2023},
}

@misc{CryoCMOSElectronicControl,
  title = {Cryo-CMOS Electronic Control for Scalable Quantum Computing: Invited - Scientific Figure on ResearchGate},
  howpublished = {\url{https://www.researchgate.net/figure/Bloch-sphere-representation-of-a-qubit_fig1_317573486}},
  note = {Accessed: 2024-05-23}
}
